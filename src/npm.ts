import { build as dntBuild } from "jsr:@deno/dnt@0.41.2"
import { copyDir, emptyDir, ensureDir, ensureFile, expandGlob, pathDirname, pathRelative, pathResolve, type dntBuildOptions } from "./deps.ts"
import { createPackageJson, createTsConfigJson, getDenoJson } from "./funcdefs.ts"

export interface BuildNpmConfig {
	/** the path to the folder where you wish to create your npm release.
	 * @defaultValue `"./npm/"`
	*/
	dir: string

	/** the path to your `deno.json` file for this project.
	 * @defaultValue `"./deno.json"`
	*/
	deno: string

	/** a list of paths/glob patterns relative to the {@link deno | `deno.json`} directory,
	 * that should be copied over to the {@link dir | `npm`} directory, at the specified path.
	 * note that if the source is a glob pattern, then its destination can only be a folder.
	 * moreover, folder sources and destinations must always end in a trailing slash (i.e. `"./path/to/my/folder/"`)
	*/
	copy?: Array<[source: string, destination: string]>

	/** write (or append) additional text files to the output {@link dir | `npm`} directory, at the specified relative destination.
	 * use the 3rd `options` item to specify text {@link Deno.WriteFileOptions | writing options}, such as `"append"` the new text, or permit the creation (`"create"`) of new file if it doesn't exist, etc...
	 * note that there will always be a new `"tsconfig.json"` text file created in the output {@link dir | `npm`} directory, which will reflect the `compilerOptions` value stored in your `deno.json`.
	*/
	text?: Array<[destination: string, data: string | ReadableStream<string>, options?: Deno.WriteFileOptions]>

	/** [`dnt`](https://jsr.io/deno/dnt) related additional build options for you to configure. */
	dnt?: Omit<dntBuildOptions, "entryPoints" | "outDir" | "scriptModule">
}

// interface NPM_Artifacts extends TemporaryFiles {
// 	files: ["package.json", "tsconfig.json"]
// }

export const defaultBuildNpmConfig: BuildNpmConfig = {
	dir: "./npm/",
	deno: "./deno.json",
	copy: [
		["./readme.md", "./readme.md"],
		["./license.md", "./license.md"],
		["./.github/code_of_conduct.md", "./code_of_conduct.md"]
	],
	text: [
		["./.gitignore", "/node_modules/\n"],
		[".npmignore", `
code_of_conduct.md
dist/
docs/
docs_config/
test/
tsconfig.json
typedoc.json
`, { append: true }],
	],
}

export const buildNpm = async (build_config: Partial<BuildNpmConfig>) => {
	const
		{ dir, deno, copy = [], text = [], dnt }: BuildNpmConfig = { ...defaultBuildNpmConfig, ...build_config },
		{
			name: library_name = "library",
			exports,
			nodePackageManager,
		} = await getDenoJson(deno),
		mainEntrypoint = typeof exports === "string" ? exports : exports["."]

	const
		package_json = await createPackageJson(deno, {
			scripts: {
				"build-dist": `npm run build-esm && npm run build-esm-minify && npm run build-iife && npm run build-iife-minify`,
				"build-esm": `npx esbuild "${mainEntrypoint}" --bundle --format=esm --outfile="./dist/${library_name}.esm.js"`,
				"build-esm-minify": `npx esbuild "${mainEntrypoint}" --bundle --minify --format=esm --outfile="./dist/${library_name}.esm.min.js"`,
				"build-iife": `npx esbuild "${mainEntrypoint}" --bundle --format=iife --outfile="./dist/${library_name}.iife.js"`,
				"build-iife-minify": `npx esbuild "${mainEntrypoint}" --bundle --minify --format=iife --outfile="./dist/${library_name}.iife.min.js"`,
			}
		}),
		tsconfig_json = await createTsConfigJson(deno)
	// we must delete the `exports` property, as it will override the correct version generated by `dntBuild`.
	delete package_json["exports"]

	await emptyDir(dir)
	await dntBuild({
		entryPoints: Object.entries(exports).map(([export_path, source_path]) => ({
			name: export_path,
			path: source_path,
		})),
		outDir: dir,
		shims: { deno: "dev" },
		packageManager: nodePackageManager,
		package: package_json,
		compilerOptions: { ...tsconfig_json.compilerOptions, target: "Latest" },
		typeCheck: false,
		declaration: "inline",
		esModule: true,
		scriptModule: false,
		test: false,
		// override the test pattern, so that no tests are included, and no Deno.test shims are created for the entirety of the transpiled package.
		// see the details here: "https://github.com/denoland/dnt?tab=readme-ov-file#test-file-matching"
		testPattern: "TEST_NOTHING",
		// TODO: there's no need for mapping, as jsr imports are converted into npm-compatible packages on the fly.
		// however, I loose the ability to map it from my package's npm releases as a consequence.
		// consider whether or not I'd like to have my dependencies as jsr imports or npm imports.
		// mappings: Object.fromEntries(
		// 	["binder", "builtin_aliases_deps", "lambda", "struct", "typedefs",].map((submodule_path) => {
		// 		return [
		// 			"jsr:@oazmi/kitchensink@0.7.5/" + submodule_path,
		// 			{
		// 				name: "@oazmi/kitchensink",
		// 				version: "0.7.5-a",
		// 				subPath: submodule_path,
		// 			}
		// 		]
		// 	})
		// )
		...dnt,
	})

	// copy other files
	Promise.all(copy.map(async ([src, dst]): Promise<void> => {
		const
			cwd = pathDirname(deno),
			is_single_file = src.endsWith("/") ? false : true,
			abs_src = pathResolve(cwd, src),
			abs_dst = pathResolve(dir, dst)
		if (is_single_file) { await Deno.copyFile(abs_src, abs_dst) }
		else {
			console.assert(abs_dst.endsWith("/"), `
provided destination folder ("${abs_dst}") path does not end with a trailing slash ("/").
folder paths MUST end with a slash, and folders and glob-patterns can only be copied over to another folder.
`)
			await ensureDir(abs_dst)
			for await (const src_dir_entry of expandGlob(src, { root: cwd })) {
				const
					abs_src = src_dir_entry.path,
					abs_dst = pathResolve(dir, pathRelative(cwd, abs_src)),
					is_file = src_dir_entry.isFile,
					is_folder = src_dir_entry.isDirectory
				if (is_file) { await ensureFile(abs_dst) }
				if (is_folder) { await ensureDir(abs_dst) }
				// TODO: how should I handle system links? (i.e. if `isSymlink` was true)
				await copyDir(abs_src, abs_dst, { overwrite: true })
			}
		}
	}))

	// write text files
	// first we add our `tsconfig.json` config to the list of text files to write.
	text.push(["./tsconfig.json", JSON.stringify(tsconfig_json)])
	for (const [dst_path, text_data, options] of text) {
		const abs_dst = pathResolve(dir, dst_path)
		await Deno.writeTextFile(abs_dst, text_data, options)
	}
}
